
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Доработка++
	ВКМ_ДополнитьФормуПрограммно();
	//Доработка-- 
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды  
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
    ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура РассчитатьСуммуСтроки(ТекущиеДанные)
	
	ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество;
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуДокумента()
	
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма") + Объект.Услуги.Итог("Сумма");
	
КонецПроцедуры

//Доработка++

&НаСервере
Процедура ВКМ_ДополнитьФормуПрограммно()
	Команда = Команды.Добавить("Заполнить");
	Команда.Заголовок = "Заполнить";
	Команда.Действие  = "Заполнить";
	
	КнопкаФормы = Элементы.Добавить("КнопкаЗаполнить", Тип("КнопкаФормы"), КоманднаяПанель);                      
	КнопкаФормы.ИмяКоманды = "Заполнить";
	КнопкаФормы.Вид = ВидКнопкиФормы.ОбычнаяКнопка; 
	КнопкаФормы.Доступность = Истина;           
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере();
	Если Объект.Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбонентскоеОбслуживание Тогда	
		ВыполнитьАвтозаполнение();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьАвтозаполнение()
	
	НоменклатураАбонентскаяПлата = Константы.ВКМ_НоменклатураАбонентскаяПлата.Получить();
	НоменклатураРаботыСпециалиста = Константы.ВКМ_НоменклатураРаботыСпециалиста.Получить();
	
	Если НЕ ЗначениеЗаполнено(НоменклатураАбонентскаяПлата)	ИЛИ НЕ ЗначениеЗаполнено(НоменклатураРаботыСпециалиста)	Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнены константы";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Объект.Товары.Очистить();
	Объект.Услуги.Очистить();
		
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ДоговорыКонтрагентов.ВКМ_АбонентскаяПлата, 0) КАК АбонентскаяПлата,
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(ВКМ_ВыполненныеКлиентуРаботыОбороты.КоличествоЧасовПриход, 0) КАК КоличествоЧасов,
		|	ЕСТЬNULL(ВКМ_ВыполненныеКлиентуРаботыОбороты.СуммаКОплатеПриход, 0) КАК СуммаКОплате
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО РеализацияТоваровУслуг.Договор = ДоговорыКонтрагентов.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВКМ_ВыполненныеКлиентуРаботы.Обороты(
		|				&ДатаНачала,
		|				&ДатаОкончания,
		|				,
		|				(Клиент, Договор) В
		|					(ВЫБРАТЬ
		|						РеализацияТоваровУслуг.Контрагент КАК Клиент,
		|						РеализацияТоваровУслуг.Договор КАК Договор
		|					ИЗ
		|						Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|					ГДЕ
		|						РеализацияТоваровУслуг.Ссылка = &Ссылка)) КАК ВКМ_ВыполненныеКлиентуРаботыОбороты
		|		ПО РеализацияТоваровУслуг.Контрагент = ВКМ_ВыполненныеКлиентуРаботыОбороты.Клиент
		|			И РеализацияТоваровУслуг.Договор = ВКМ_ВыполненныеКлиентуРаботыОбороты.Договор
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &Ссылка
		|ИТОГИ
		|	МАКСИМУМ(АбонентскаяПлата),
		|	СУММА(КоличествоЧасов),
		|	СУММА(СуммаКОплате)
		|ПО
		|	Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(Объект.Дата));
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Услуги.Добавить(); 
        НоваяСтрока.Номенклатура = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатураАбонентскаяПлата);
        НоваяСтрока.Сумма = Выборка.АбонентскаяПлата;
        Если Выборка.СуммаКОплате <> 0 Тогда
        	НоваяСтрока = Объект.Услуги.Добавить(); 
        	НоваяСтрока.Номенклатура = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатураРаботыСпециалиста);
        	НоваяСтрока.Количество = Выборка.КоличествоЧасов;
        	НоваяСтрока.Сумма = Выборка.СуммаКОплате;
        КонецЕсли;
        Объект.Основание = Объект.Договор; 	
	КонецЦикла;
	
КонецПроцедуры

//Доработка--

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти
