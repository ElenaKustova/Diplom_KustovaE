#Область ПрограммныйИнтерфейс
//Функция создает защищённое соединение с сервером "api.telegram.org"
//Возвращаемое значение:
//  HTTPОтвет
Функция ОтправитьИУдалитьУведомления() Экспорт 
	
	УстановитьПривилегированныйРежим(Истина); 
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'ОтправкаУведомлений'", ОбщегоНазначения.КодОсновногоЯзыка()),
	УровеньЖурналаРегистрации.Информация,,, НСтр("ru = 'Начато регламентное задание по отправке уведомлений'"));
	
	ДанныеДляОтправки = ВКМ_РегламентноеЗаданиеСправочникУведомления.ПолучитьДанныеДляОтправки();
	
	Для Каждого Уведомление Из ДанныеДляОтправки Цикл
		
		Токен = Константы.ВКМ_ТокенУправленияТелеграмБотом.Получить();
			
		Соединение = Новый HTTPСоединение("api.telegram.org",443,,,,20,Новый ЗащищенноеСоединениеOpenSSL);
		АдресРесурса = "bot" + Токен + "/sendMessage?chat_id=" + Уведомление.chat_id + "&text= " + Уведомление.text; 
		
		Заголовки = Новый Соответствие;		
		Заголовки.Вставить("Content-Type","application/json"); 
		
		Запрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);  
		
		Ответ = Соединение.ОтправитьДляОбработки(Запрос); 
		
		Если Ответ.КодСостояния = 200 Тогда 
			ВКМ_РегламентноеЗаданиеСправочникУведомления.УдалитьОтправленныеУведомления(Уведомление.Идентификатор); 
		Иначе 
			ИнформацияОбОшибке = ИнформацияОбОшибке(); 
			ОтветОбОшибке(ИнформацияОбОшибке);
		КонецЕсли;   
		
	КонецЦикла; 
	ЗаписьЖурналаРегистрации(НСтр("ru = 'ОтправкаУведомлений'", ОбщегоНазначения.КодОсновногоЯзыка()),
	УровеньЖурналаРегистрации.Информация,,, НСтр("ru = 'Закончено регламентное задание по отправке уведомлений'"));
	
	Возврат Ответ; 
	
КонецФункции
//Функция 
// Параметры:
//  ИнформацияОбОшибке - Строка - полное "ФИнформацияОбОшибке".
// Возвращаемое значение:
//  Строка
Функция ОтветОбОшибке(ИнформацияОбОшибке) Экспорт 
	ЗаписьЖурналаРегистрации("HTTPСервисы.Ошибка", УровеньЖурналаРегистрации.Ошибка,,,
	ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	Результат = Новый Структура;
	Результат.Вставить("Result", "Error"); 
	Результат.Вставить("ErrorText", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке)); 
	Возврат ОтветJSON(Результат, 500); 
КонецФункции 
//Функция 
// Параметры:
//  ДанныеДляОтправки - структура, строка - .
// Возвращаемое значение:
//  Строка
Функция СериализоватьВJSON(ДанныеДляОтправки) Экспорт
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись,ДанныеДляОтправки);
	Уведомления = Запись.Закрыть();
	Возврат Уведомления;	
КонецФункции
//Функция 
// Параметры:
//  Объект - структура, строка - .
//  КодСостояния - Число
// Возвращаемое значение:
//  Строка
Функция ОтветJSON(Объект, КодСостояния = 200) Экспорт
	Ответ = Новый HTTPСервисОтвет(КодСостояния);
	Ответ.УстановитьТелоИзСтроки(СтрокаJSON(Объект));
	Ответ.Заголовки.Вставить("Content-Type", "application/json");
	Возврат Ответ;
КонецФункции
//Функция 
// Параметры:
//  ОбъектJSON - структура, строка - .
// Возвращаемое значение:
//  Строка
Функция СтрокаJSON(ОбъектJSON) Экспорт
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(,Символы.Таб);
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписатьJSON(Запись, ОбъектJSON);
	Возврат Запись.Закрыть();
КонецФункции
//Функция возвращает JSON "Result","Ok"
// Возвращаемое значение:
//  Строка
Функция ПростойУспешныйОтвет() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Result","Ok");
	Возврат ОтветJSON(Результат);	
КонецФункции

#КонецОбласти 

